name: Build project

on: 
  pull_request:
  push:
    branches: [ main, test-yml ]

jobs:
  buildForAllSupportedPlatforms:
    name: Build for ${{ matrix.targetPlatform }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        targetPlatform:
          - StandaloneOSX # Build a macOS standalone (Intel 64-bit).
          - StandaloneWindows64 # Build a Windows 64-bit standalone.
          #- WebGL # WebGL.
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true
      - uses: actions/cache@v3
        with:
          projectPath: BloomAndDoomGame
          path: Library
          key: Library-${{ matrix.targetPlatform }}
          restore-keys: Library-
      - if: matrix.targetPlatform == 'Android'
        uses: jlumbroso/free-disk-space@v1.3.1
      - uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          projectPath: BloomAndDoomGame
          targetPlatform: ${{ matrix.targetPlatform }}
      
      # Create archive with custom name
      - name: Create release archive
        run: |
          cd build/${{ matrix.targetPlatform }}
          if [ "${{ matrix.targetPlatform }}" = "StandaloneWindows64" ]; then
            zip -r "BloomAndDoom-Windows.zip" .
            echo "ARCHIVE_NAME=BloomAndDoom-Windows.zip" >> $GITHUB_ENV
            echo "PLATFORM_NAME=Windows" >> $GITHUB_ENV
          elif [ "${{ matrix.targetPlatform }}" = "StandaloneOSX" ]; then
            zip -r "BloomAndDoom-MacOS.zip" .
            echo "ARCHIVE_NAME=BloomAndDoom-MacOS.zip" >> $GITHUB_ENV
            echo "PLATFORM_NAME=MacOS" >> $GITHUB_ENV
          fi
          
      - uses: actions/upload-artifact@v4
        with:
          name: Build-${{ matrix.targetPlatform }}
          path: build/${{ matrix.targetPlatform }}

  # DEploy after all builds
  deploy-to-landing-page:
    name: Deploy to Landing Page
    runs-on: ubuntu-latest
    needs: buildForAllSupportedPlatforms
    if: github.event_name == 'push'
    
    steps:
      - name: Checkout LandingPage branch
        uses: actions/checkout@v4
        with:
          ref: LandingPage
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
          
      - name: Create downloads folder and move builds
        run: |
          mkdir -p downloads
          
          # Traiter Windows
          if [ -d "artifacts/Build-StandaloneWindows64" ]; then
            cd artifacts/Build-StandaloneWindows64
            zip -r "../../downloads/BloomAndDoom-Windows.zip" .
            cd ../..
            echo "Windows build created"
          fi
          
          # Traiter MacOS
          if [ -d "artifacts/Build-StandaloneOSX" ]; then
            cd artifacts/Build-StandaloneOSX
            zip -r "../../downloads/BloomAndDoom-MacOS.zip" .
            cd ../..
            echo "MacOS build created"
          fi
          
          # Nettoyer les artifacts temporaires
          rm -rf artifacts
          
      - name: Commit and push new builds
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action Bot"
          
          # Ajouter les nouveaux fichiers
          git add downloads/
          
          # VÃ©rifier s'il y a des changements
          if git diff --staged --quiet; then
            echo "Aucun changement dÃ©tectÃ©"
          else
            git commit -m "ðŸš€ Nouveaux builds - $(date '+%Y-%m-%d %H:%M:%S')"
            git push
            echo "Nouveaux builds poussÃ©s vers la branche LandingPage"
          fi